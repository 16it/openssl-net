<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ManagedOpenSsl</name>
    </assembly>
    <members>
        <member name="T:OpenSSL.OpenSslError">
            <summary>
            This is a struct that contains a uint for the native openssl error code.
            It provides helper methods to convert this error code into strings.
            </summary>
        </member>
        <member name="M:OpenSSL.OpenSslError.#ctor(System.UInt32)">
            <summary>
            Constructs an OpenSslError object.
            </summary>
            <param name="err">The native error code</param>
        </member>
        <member name="P:OpenSSL.OpenSslError.ErrorCode">
            <summary>
            Returns the native error code
            </summary>
        </member>
        <member name="P:OpenSSL.OpenSslError.Library">
            <summary>
            Returns the result of ERR_lib_error_string()
            </summary>
        </member>
        <member name="P:OpenSSL.OpenSslError.Reason">
            <summary>
            Returns the results of ERR_reason_error_string()
            </summary>
        </member>
        <member name="P:OpenSSL.OpenSslError.Function">
            <summary>
            Returns the results of ERR_func_error_string()
            </summary>
        </member>
        <member name="P:OpenSSL.OpenSslError.Message">
            <summary>
            Returns the results of ERR_error_string_n()
            </summary>
        </member>
        <member name="T:OpenSSL.OpenSslException">
            <summary>
            Exception class to provide OpenSSL specific information when errors occur.
            </summary>
        </member>
        <member name="M:OpenSSL.OpenSslException.#ctor">
            <summary>
            When this class is instantiated, GetErrorMessage() is called automatically.
            This will call ERR_get_error() on the native openssl interface, once for every
            error that is in the current context. The exception message is the concatination
            of each of these errors turned into strings using ERR_error_string_n().
            </summary>
        </member>
        <member name="P:OpenSSL.OpenSslException.Errors">
            <summary>
            Returns the list of errors associated with this exception.
            </summary>
        </member>
        <member name="T:OpenSSL.DH">
            <summary>
            Encapsulates the natives openssl Diffie-Hellman functions (DH_*)
            </summary>
        </member>
        <member name="T:OpenSSL.Base">
            <summary>
            Base class for all openssl wrapped objects. 
            Contains the raw unmanaged pointer and has a Handle property to get access to it. 
            Also overloads the ToString() method with a BIO print.
            </summary>
        </member>
        <member name="T:OpenSSL.IStackable">
            <summary>
            Simple interface used for the internal implementation of the generic OpenSSL.Stack
            </summary>
        </member>
        <member name="P:OpenSSL.IStackable.Handle">
            <summary>
            Underlying native pointer
            </summary>
        </member>
        <member name="F:OpenSSL.Base.ptr">
            <summary>
            Raw unmanaged pointer
            </summary>
        </member>
        <member name="F:OpenSSL.Base.owner">
            <summary>
            If this object is the owner, then call the appropriate native free function.
            </summary>
        </member>
        <member name="F:OpenSSL.Base.isDisposed">
            <summary>
            This is to prevent double-deletion issues.
            </summary>
        </member>
        <member name="M:OpenSSL.Base.Finalize">
            <summary>
            This destructor just calls Dispose().
            </summary>
        </member>
        <member name="M:OpenSSL.Base.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Constructor which takes the raw unmanged pointer. 
            This is the only way to construct this object and all dervied types.
            </summary>
            <param name="ptr"></param>
            <param name="takeOwnership"></param>
        </member>
        <member name="M:OpenSSL.Base.Print(OpenSSL.BIO)">
            <summary>
            This method is used by the ToString() implementation. A great number of
            openssl objects support printing, so this is a conveinence method.
            Dervied types should override this method and not ToString().
            </summary>
            <param name="bio">The BIO stream object to print into</param>
        </member>
        <member name="M:OpenSSL.Base.ToString">
            <summary>
            Override of ToString() which uses Print() into a BIO memory buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.Base.OnDispose">
            <summary>
            Default base implementation does nothing.
            </summary>
        </member>
        <member name="M:OpenSSL.Base.Dispose">
            <summary>
            Implementation of the IDisposable interface.
            If the native pointer is not null, we haven't been disposed, and we are the owner,
            then call the virtual OnDispose() method.
            </summary>
        </member>
        <member name="P:OpenSSL.Base.Handle">
            <summary>
            Access to the raw unmanaged pointer. Implements the IStackable interface.
            </summary>
        </member>
        <member name="F:OpenSSL.DH.Generator2">
            <summary>
            Constant generator value of 2.
            </summary>
        </member>
        <member name="F:OpenSSL.DH.Generator5">
            <summary>
            Constant generator value of 5.
            </summary>
        </member>
        <member name="M:OpenSSL.DH.#ctor(System.Int32,System.Int32)">
            <summary>
            Calls DH_generate_parameters()
            </summary>
            <param name="primeLen"></param>
            <param name="generator"></param>
        </member>
        <member name="M:OpenSSL.DH.#ctor(System.Int32,System.Int32,OpenSSL.BigNumber.GeneratorHandler,System.Object)">
            <summary>
            Calls DH_generate_parameters_ex()
            </summary>
            <param name="primeLen"></param>
            <param name="generator"></param>
            <param name="callback"></param>
            <param name="arg"></param>
        </member>
        <member name="M:OpenSSL.DH.#ctor">
            <summary>
            Calls DH_new().
            </summary>
        </member>
        <member name="M:OpenSSL.DH.#ctor(OpenSSL.BigNumber,OpenSSL.BigNumber)">
            <summary>
            Calls DH_new().
            </summary>
            <param name="p"></param>
            <param name="g"></param>
        </member>
        <member name="M:OpenSSL.DH.#ctor(OpenSSL.BigNumber,OpenSSL.BigNumber,OpenSSL.BigNumber,OpenSSL.BigNumber)">
            <summary>
            Calls DH_new().
            </summary>
            <param name="p"></param>
            <param name="g"></param>
            <param name="pub_key"></param>
            <param name="priv_key"></param>
        </member>
        <member name="M:OpenSSL.DH.FromParameters(System.String)">
            <summary>
            Factory method that calls FromParametersPEM() to deserialize
            a DH object from a PEM-formatted string.
            </summary>
            <param name="pem"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.DH.FromParametersPEM(OpenSSL.BIO)">
            <summary>
            Factory method that calls PEM_read_bio_DHparams() to deserialize 
            a DH object from a PEM-formatted string using the BIO interface.
            </summary>
            <param name="bio"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.DH.FromParametersDER(OpenSSL.BIO)">
            <summary>
            Factory method that calls XXX() to deserialize
            a DH object from a DER-formatted buffer using the BIO interface.
            </summary>
            <param name="bio"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.DH.GenerateKeys">
            <summary>
            Calls DH_generate_key().
            </summary>
        </member>
        <member name="M:OpenSSL.DH.ComputeKey(OpenSSL.BigNumber)">
            <summary>
            Calls DH_compute_key().
            </summary>
            <param name="pubkey"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.DH.WriteParametersPEM(OpenSSL.BIO)">
            <summary>
            Calls PEM_write_bio_DHparams().
            </summary>
            <param name="bio"></param>
        </member>
        <member name="M:OpenSSL.DH.WriteParametersDER(OpenSSL.BIO)">
            <summary>
            Calls ASN1_i2d_bio() with the i2d = i2d_DHparams().
            </summary>
            <param name="bio"></param>
        </member>
        <member name="M:OpenSSL.DH.Print(OpenSSL.BIO)">
            <summary>
            Calls DHparams_print().
            </summary>
            <param name="bio"></param>
        </member>
        <member name="M:OpenSSL.DH.Check">
            <summary>
            Calls DH_check().
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.DH.OnDispose">
            <summary>
            Calls DH_free().
            </summary>
        </member>
        <member name="P:OpenSSL.DH.P">
            <summary>
            Accessor for the p value.
            </summary>
        </member>
        <member name="P:OpenSSL.DH.G">
            <summary>
            Accessor for the g value.
            </summary>
        </member>
        <member name="P:OpenSSL.DH.PublicKey">
            <summary>
            Accessor for the pub_key value.
            </summary>
        </member>
        <member name="P:OpenSSL.DH.PrivateKey">
            <summary>
            Accessor for the priv_key value.
            </summary>
        </member>
        <member name="P:OpenSSL.DH.PEM">
            <summary>
            Creates a BIO.MemoryBuffer(), calls WriteParametersPEM() into this buffer, 
            then returns the buffer as a string.
            </summary>
        </member>
        <member name="P:OpenSSL.DH.DER">
            <summary>
            Creates a BIO.MemoryBuffer(), calls WriteParametersDER() into this buffer, 
            then returns the buffer.
            </summary>
        </member>
        <member name="P:OpenSSL.DH.NoExpConstantTime">
            <summary>
            Sets or clears the FlagNoExpConstTime bit in the flags field.
            </summary>
        </member>
        <member name="T:OpenSSL.DH.CheckCode">
            <summary>
            Flags for the return value of DH_check().
            </summary>
        </member>
        <member name="F:OpenSSL.DH.CheckCode.CheckP_NotPrime">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenSSL.DH.CheckCode.CheckP_NotSafePrime">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenSSL.DH.CheckCode.UnableToCheckGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenSSL.DH.CheckCode.NotSuitableGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenSSL.X509Request">
            <summary>
            Wraps a X509_REQ object.
            </summary>
        </member>
        <member name="M:OpenSSL.X509Request.#ctor">
            <summary>
            Calls X509_REQ_new()
            </summary>
        </member>
        <member name="M:OpenSSL.X509Request.#ctor(System.Int32,OpenSSL.X509Name,OpenSSL.CryptoKey)">
            <summary>
            Calls X509_REQ_new() and then initializes versio, subject, and key.
            </summary>
            <param name="version"></param>
            <param name="subject"></param>
            <param name="key"></param>
        </member>
        <member name="M:OpenSSL.X509Request.#ctor(OpenSSL.BIO)">
            <summary>
            
            </summary>
            <param name="bio"></param>
        </member>
        <member name="M:OpenSSL.X509Request.#ctor(System.String)">
            <summary>
            Creates a X509_REQ from a PEM formatted string.
            </summary>
            <param name="pem"></param>
        </member>
        <member name="M:OpenSSL.X509Request.Sign(OpenSSL.CryptoKey,OpenSSL.MessageDigest)">
            <summary>
            Sign this X509Request using the supplied key and digest.
            </summary>
            <param name="pkey"></param>
            <param name="digest"></param>
        </member>
        <member name="M:OpenSSL.X509Request.Verify(OpenSSL.CryptoKey)">
            <summary>
            Verify this X509Request against the supplied key.
            </summary>
            <param name="pkey"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.X509Request.Print(OpenSSL.BIO)">
            <summary>
            Calls X509_REQ_print()
            </summary>
            <param name="bio"></param>
        </member>
        <member name="M:OpenSSL.X509Request.Write(OpenSSL.BIO)">
            <summary>
            Calls PEM_write_bio_X509_REQ()
            </summary>
            <param name="bio"></param>
        </member>
        <member name="M:OpenSSL.X509Request.CreateCertificate(System.Int32,OpenSSL.CryptoKey)">
            <summary>
            Converts this request into a certificate using X509_REQ_to_X509().
            </summary>
            <param name="days"></param>
            <param name="pkey"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.X509Request.OnDispose">
            <summary>
            Calls X509_REQ_free()
            </summary>
        </member>
        <member name="P:OpenSSL.X509Request.Version">
            <summary>
            Accessor to the version field. The settor calls X509_REQ_set_version().
            </summary>
        </member>
        <member name="P:OpenSSL.X509Request.PublicKey">
            <summary>
            Accessor to the pubkey field. Uses X509_REQ_get_pubkey() and X509_REQ_set_pubkey()
            </summary>
        </member>
        <member name="P:OpenSSL.X509Request.Subject">
            <summary>
            Accessor to the subject field. Setter calls X509_REQ_set_subject_name().
            </summary>
        </member>
        <member name="P:OpenSSL.X509Request.DSAPublicKeyString">
            <summary>
            Getter to the public key assuming that it is DSA.
            </summary>
        </member>
        <member name="P:OpenSSL.X509Request.PEM">
            <summary>
            Returns the PEM formatted string for this object.
            </summary>
        </member>
        <member name="T:OpenSSL.BigNumber">
            <summary>
            Wraps the BN_* set of functions.
            </summary>
        </member>
        <member name="F:OpenSSL.BigNumber.One">
            <summary>
            Creates a BigNumber object by calling BN_value_one()
            </summary>
        </member>
        <member name="M:OpenSSL.BigNumber.#ctor">
            <summary>
            Calls BN_new()
            </summary>
        </member>
        <member name="M:OpenSSL.BigNumber.#ctor(OpenSSL.BigNumber)">
            <summary>
            Calls BN_dup() on the BigNumber passed in.
            </summary>
            <param name="rhs"></param>
        </member>
        <member name="M:OpenSSL.BigNumber.#ctor(System.UInt32)">
            <summary>
            Creates a BigNumber by calling BN_set_word()
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenSSL.BigNumber.FromDecimalString(System.String)">
            <summary>
            Calls BN_dec2bn()
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.FromHexString(System.String)">
            <summary>
            Calls BN_hex2bn()
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.FromArray(System.Byte[])">
            <summary>
            Calls BN_bin2bn()
            </summary>
            <param name="buf"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.ToDecimalString">
            <summary>
            Calls BN_bn2dec()
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.ToHexString">
            <summary>
            Calls BN_bn2hex()
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.op_Implicit(OpenSSL.BigNumber)~System.UInt32">
            <summary>
            Calls BN_get_word()
            </summary>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.op_Implicit(System.UInt32)~OpenSSL.BigNumber">
            <summary>
            Creates a new BigNumber object from a uint.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.op_Implicit(OpenSSL.BigNumber)~System.Byte[]">
            <summary>
            Calls BN_bn2bin()
            </summary>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.Clear">
            <summary>
            Calls BN_clear()
            </summary>
        </member>
        <member name="M:OpenSSL.BigNumber.op_Addition(OpenSSL.BigNumber,OpenSSL.BigNumber)">
            <summary>
            Calls BN_add()
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.op_Subtraction(OpenSSL.BigNumber,OpenSSL.BigNumber)">
            <summary>
            Calls BN_sub()
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.op_Equality(OpenSSL.BigNumber,OpenSSL.BigNumber)">
            <summary>
            Determines if lhs is by-value equal to rhs
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.op_Inequality(OpenSSL.BigNumber,OpenSSL.BigNumber)">
            <summary>
            Determines if lhs is by-value different than rhs
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.Equals(System.Object)">
            <summary>
            Calls BN_cmp()
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.GetHashCode">
            <summary>
            Creates a hash code by converting this object to a decimal string and 
            returns the hash code of that string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.BigNumber.Print(OpenSSL.BIO)">
            <summary>
            Calls BN_print()
            </summary>
            <param name="bio"></param>
        </member>
        <member name="M:OpenSSL.BigNumber.OnDispose">
            <summary>
            Calls BN_free()
            </summary>
        </member>
        <member name="M:OpenSSL.BigNumber.CompareTo(OpenSSL.BigNumber)">
            <summary>
            Calls BN_cmp()
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:OpenSSL.BigNumber.Bits">
            <summary>
            Returns BN_num_bits()
            </summary>
        </member>
        <member name="P:OpenSSL.BigNumber.Bytes">
            <summary>
            Converts the result of Bits into the number of bytes.
            </summary>
        </member>
        <member name="T:OpenSSL.BigNumber.GeneratorHandler">
            <summary>
            Generator callback. Used mostly for status indications for long-
            running generator functions.
            </summary>
            <param name="p"></param>
            <param name="n"></param>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:OpenSSL.DebugOptions">
            <summary>
            V_CRYPTO_MDEBUG_*
            </summary>
        </member>
        <member name="F:OpenSSL.DebugOptions.Time">
            <summary>
            V_CRYPTO_MDEBUG_TIME 
            </summary>
        </member>
        <member name="F:OpenSSL.DebugOptions.Thread">
            <summary>
            V_CRYPTO_MDEBUG_THREAD
            </summary>
        </member>
        <member name="F:OpenSSL.DebugOptions.All">
            <summary>
            V_CRYPTO_MDEBUG_ALL 
            </summary>
        </member>
        <member name="T:OpenSSL.MemoryCheck">
            <summary>
            CRYPTO_MEM_CHECK_*
            </summary>
        </member>
        <member name="F:OpenSSL.MemoryCheck.Off">
            <summary>
            CRYPTO_MEM_CHECK_OFF 
            </summary>
        </member>
        <member name="F:OpenSSL.MemoryCheck.On">
            <summary>
            CRYPTO_MEM_CHECK_ON 
            </summary>
        </member>
        <member name="F:OpenSSL.MemoryCheck.Enable">
            <summary>
            CRYPTO_MEM_CHECK_ENABLE
            </summary>
        </member>
        <member name="F:OpenSSL.MemoryCheck.Disable">
            <summary>
            CRYPTO_MEM_CHECK_DISABLE
            </summary>
        </member>
        <member name="T:OpenSSL.Crypto.MemoryLeakHandler">
            <summary>
            CRYPTO_MEM_LEAK_CB
            </summary>
            <param name="order"></param>
            <param name="file"></param>
            <param name="line"></param>
            <param name="num_bytes"></param>
            <param name="addr"></param>
        </member>
        <member name="T:OpenSSL.Native">
            <summary>
            This is the low-level C-style interface to the crypto API.
            Use this interface with caution.
            </summary>
        </member>
        <member name="F:OpenSSL.Native.DLLNAME">
            <summary>
            This is the name of the DLL that P/Invoke loads and tries to bind all of
            these native functions to.
            </summary>
        </member>
        <member name="F:OpenSSL.Native.bn_gencb_st.arg">
            To handle binary (in)compatibility 
        </member>
        <member name="F:OpenSSL.Native.bn_gencb_st.cb">
            callback-specific data 
        </member>
        <member name="T:OpenSSL.CryptoKey">
            <summary>
            Wraps the native OpenSSL EVP_PKEY object
            </summary>
        </member>
        <member name="M:OpenSSL.X509Certificate.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenSSL.X509Certificate.Subject">
            <summary>
            This is the subject of the certificate
            </summary>
        </member>
        <member name="P:OpenSSL.X509Certificate.Issuer">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
