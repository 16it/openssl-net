<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ManagedOpenSsl</name>
    </assembly>
    <members>
        <member name="T:OpenSSL.CryptoKey">
            <summary>
            Wraps the native OpenSSL EVP_PKEY object
            </summary>
        </member>
        <member name="T:OpenSSL.Base">
            <summary>
            Base class for all openssl wrapped objects. 
            Contains the raw unmanaged pointer and has a Handle property to get access to it. 
            Also overloads the ToString() method with a BIO print.
            </summary>
        </member>
        <member name="T:OpenSSL.IStackable">
            <summary>
            This interface is used by the generic Stack class. 
            An IStackable must have Handle get and set accessors.
            </summary>
        </member>
        <member name="P:OpenSSL.IStackable.Handle">
            <summary>
            Access to the raw unmanaged pointer.
            </summary>
        </member>
        <member name="F:OpenSSL.Base.ptr">
            <summary>
            Raw unmanaged pointer
            </summary>
        </member>
        <member name="M:OpenSSL.Base.#ctor(System.IntPtr)">
            <summary>
            Constructor which takes the raw unmanged pointer. 
            This is the only way to construct this object and all dervied types.
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:OpenSSL.Base.Print(OpenSSL.BIO)">
            <summary>
            This method is used by the ToString() implementation. A great number of
            openssl objects support printing, so this is a conveinence method.
            Dervied types should override this method and not ToString().
            </summary>
            <param name="bio">The BIO stream object to print into</param>
        </member>
        <member name="M:OpenSSL.Base.ToString">
            <summary>
            Override of ToString() which uses Print() into a BIO memory buffer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenSSL.Base.Handle">
            <summary>
            Access to the raw unmanaged pointer. Implements the IStackable interface.
            </summary>
        </member>
        <member name="M:OpenSSL.CryptoKey.#ctor">
            <summary>
            Default constructor for a CryptoKey.  EVP_PKEY_new() is called.
            </summary>
        </member>
        <member name="M:OpenSSL.CryptoKey.FromPublicKey(System.String)">
            <summary>
            Creates a CryptoKey given a string of a public key in PEM format.
            </summary>
            <param name="pem">The public key in PEM format</param>
            <returns>A newly created CryptoKey</returns>
        </member>
        <member name="M:OpenSSL.CryptoKey.FromPublicKey(OpenSSL.BIO)">
            <summary>
            Creates a CryptoKey given a BIO that contains the public key in PEM format.
            This method calls PEM_read_bio_PUBKEY().
            </summary>
            <param name="bio">The stream object that contains a public key in PEM format.</param>
            <returns>A newly created CryptoKey</returns>
        </member>
        <member name="M:OpenSSL.CryptoKey.FromPrivateKey(System.String)">
            <summary>
            Creates a CryptoKey given a string of a private key in PEM format.
            </summary>
            <param name="pem">The private key in PEM format</param>
            <returns>A newly created CryptoKey</returns>
        </member>
        <member name="M:OpenSSL.CryptoKey.FromPrivateKey(OpenSSL.BIO)">
            <summary>
            Creates a CryptoKey given a BIO that contains the private key in PEM format.
            This method calls PEM_read_bio_PrivateKey().
            </summary>
            <param name="bio">The stream object that contains a private key in PEM format.</param>
            <returns>A newly created CryptoKey</returns>
        </member>
        <member name="M:OpenSSL.CryptoKey.#ctor(OpenSSL.DSA)">
            <summary>
            Constructs a CryptoKey using the DSA algorithm.
            </summary>
            <param name="dsa">This object contains a DSA public/private key pair</param>
        </member>
        <member name="M:OpenSSL.CryptoKey.#ctor(OpenSSL.RSA)">
            <summary>
            Constrcuts a CryptoKey using the RSA algorithm.
            </summary>
            <param name="rsa">This object contains an RSA public/private key pair</param>
        </member>
        <member name="M:OpenSSL.CryptoKey.#ctor(OpenSSL.DH)">
            <summary>
            Constructs a CryptoKey using the DH algorithm.
            </summary>
            <param name="dh">This object contains a DH public/private key pair</param>
        </member>
        <member name="M:OpenSSL.CryptoKey.Assign(System.Int32,System.Byte[])">
            <summary>
            Calls EVP_PKEY_assign()
            </summary>
            <param name="type">Not sure</param>
            <param name="key">Not sure</param>
        </member>
        <member name="M:OpenSSL.CryptoKey.Dispose">
            <summary>
            Calls EVP_PKEY_free()
            </summary>
        </member>
        <member name="P:OpenSSL.CryptoKey.Bits">
            <summary>
            Calls EVP_PKEY_bits()
            </summary>
        </member>
        <member name="P:OpenSSL.CryptoKey.Size">
            <summary>
            Calls EVP_PKEY_size()
            </summary>
        </member>
        <member name="T:OpenSSL.X509Store">
            <summary>
            This object wraps an X509_STORE object.
            </summary>
        </member>
        <member name="M:OpenSSL.X509Store.#ctor">
            <summary>
            Calls X509_STORE_new()
            </summary>
        </member>
        <member name="M:OpenSSL.X509Store.#ctor(OpenSSL.X509Chain)">
            <summary>
            Constructs an X509Store using an X509Chain.
            </summary>
            <param name="chain">All certificates in this chain will be added to the trusted chain.</param>
        </member>
        <member name="M:OpenSSL.X509Store.Verify(OpenSSL.X509Certificate,System.String@)">
            <summary>
            Creates a new X509_STORE_CTX and uses it to verify that a certificate is valid.
            </summary>
            <param name="cert">The certificate to be verified.</param>
            <param name="error">If verify returns false, then this argument will be filled in with the reason for the certificate being invalid.</param>
            <returns>true if the certificate is valid, false otherwise. The error argument will be filled in with the reason for failure if false is returned.</returns>
        </member>
        <member name="M:OpenSSL.X509Store.AddTrusted(OpenSSL.X509Certificate)">
            <summary>
            Calls X509_STORE_add_cert()
            </summary>
            <param name="cert"></param>
        </member>
        <member name="M:OpenSSL.X509Store.AddUntrusted(OpenSSL.X509Certificate)">
            <summary>
            Adds a certificate to the untrusted chain.
            </summary>
            <param name="cert">Certificate to be added as untrusted.</param>
        </member>
        <member name="M:OpenSSL.X509Store.Dispose">
            <summary>
            Calls X509_STORE_free()
            </summary>
        </member>
        <member name="P:OpenSSL.X509Store.Untrusted">
            <summary>
            Access to the untrusted chain.
            </summary>
        </member>
        <member name="T:OpenSSL.X509Name">
            <summary>
            Wraps an X509_NAME object.
            </summary>
        </member>
        <member name="M:OpenSSL.X509Name.#ctor">
            <summary>
            Calls X509_NAME_new()
            </summary>
        </member>
        <member name="M:OpenSSL.X509Name.#ctor(OpenSSL.X509Name)">
            <summary>
            Copy constructor. Calls X509_NAME_dup()
            </summary>
            <param name="rhs">Name to be duplicated</param>
        </member>
        <member name="M:OpenSSL.X509Name.#ctor(System.String)">
            <summary>
            Creates an X509Name object given a formatted string.
            </summary>
            <param name="str">Formatted string</param>
            <example>/CN=commonName/O=organization/OU=org unit/C=country</example>
        </member>
        <member name="M:OpenSSL.X509Name.op_Implicit(System.String)~OpenSSL.X509Name">
            <summary>
            Implicit conversion from a string into an X509Name
            </summary>
            <param name="value">Formatted string</param>
            <returns>A newly created X509Name object</returns>
        </member>
        <member name="M:OpenSSL.X509Name.AddEntryByName(System.String,System.String)">
            <summary>
            Add a name entry by its short name. 
            For instance, CN is the short name for the commonName entry.
            Calls X509_NAME_add_entry_by_NID() after converting the name argument to a nid.
            </summary>
            <param name="name">The short name for which this entry is called.</param>
            <param name="value">The value that this entry should contain.</param>
        </member>
        <member name="M:OpenSSL.X509Name.AddEntryByNid(System.Int32,System.String)">
            <summary>
            Add a name entry by its nid.
            Calls X509_NAME_add_entry_by_NID()
            </summary>
            <param name="nid">The nid that this name entry is called.</param>
            <param name="value">The value that this entry should contain.</param>
        </member>
        <member name="M:OpenSSL.X509Name.GetTextByNid(System.Int32)">
            <summary>
            Calls X509_NAME_get_text_by_NID()
            </summary>
            <param name="nid"></param>
            <returns>The value of the name entry indexed by nid</returns>
        </member>
        <member name="M:OpenSSL.X509Name.GetTextByName(System.String)">
            <summary>
            Calls GetTextByNid() after converting the name argument into a nid.
            </summary>
            <param name="name">The short name for the entry to be returned.</param>
            <returns>The entry requsted by name.</returns>
        </member>
        <member name="M:OpenSSL.X509Name.GetIndexByNid(System.Int32,System.Int32)">
            <summary>
            Calls X509_NAME_get_index_by_NID()
            </summary>
            <param name="nid">Specifies the nid for the entry to be found.</param>
            <param name="lastpos">Use -1 here if you which to find the first entry by the specified nid.</param>
            <returns>The index that this entry occurs. Returns lastpos if this entry cannot be found.</returns>
        </member>
        <member name="M:OpenSSL.X509Name.IndexOf(System.String,System.Int32)">
            <summary>
            Uses GetIndexByNid() after converting the name argument into a nid.
            </summary>
            <param name="name">The short name of the entry to be found.</param>
            <param name="lastpos">If multiple entries of the same type are contained, use this argument to keep finding subsequent entries.</param>
            <returns>If not found, returns lastpos. Otherwise returns the index that this entry resides.</returns>
        </member>
        <member name="M:OpenSSL.X509Name.IndexOf(System.String)">
            <summary>
            Uses GetIndexByNid() after converting the name argument into a nid.
            This method does not allow the user to iterate through multiple entries of the same type.
            Use GetIndexByNid(string name, int lastpos) for this functionality.
            </summary>
            <param name="name">The short name of the entry to be found.</param>
            <returns>If this entry cannot be found, returns -1. Otherwise returns the index that this entry lives.</returns>
        </member>
        <member name="M:OpenSSL.X509Name.Contains(System.String)">
            <summary>
            Determines if an entry by a particular nid is contained within this name.
            </summary>
            <param name="name">The short name of the entry to be queried.</param>
            <returns>true if the entry could be found, otherwise false.</returns>
        </member>
        <member name="M:OpenSSL.X509Name.Digest(OpenSSL.MessageDigest,System.Int32)">
            <summary>
            Calls X509_NAME_digest()
            </summary>
            <param name="type"></param>
            <param name="cbSize"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.X509Name.Print(OpenSSL.BIO)">
            <summary>
            Calls X509_NAME_print()
            </summary>
            <param name="bio"></param>
        </member>
        <member name="M:OpenSSL.X509Name.Dispose">
            <summary>
            Calls X509_NAME_free()
            </summary>
        </member>
        <member name="M:OpenSSL.X509Name.CompareTo(OpenSSL.X509Name)">
            <summary>
            Calls X509_NAME_cmp()
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:OpenSSL.X509Name.OneLine">
            <summary>
            Calls X509_NAME_oneline()
            </summary>
        </member>
        <member name="P:OpenSSL.X509Name.Common">
            <summary>
            Access to the name entry with a short name of CN.
            </summary>
        </member>
        <member name="P:OpenSSL.X509Name.Country">
            <summary>
            Access to the name entry with a short name of C.
            </summary>
        </member>
        <member name="P:OpenSSL.X509Name.Locality">
            <summary>
            Access to the name entry with a short name of L.
            </summary>
        </member>
        <member name="P:OpenSSL.X509Name.StateOrProvince">
            <summary>
            Access to the name entry with a short name of ST.
            </summary>
        </member>
        <member name="P:OpenSSL.X509Name.Organization">
            <summary>
            Access to the name entry with a short name of O.
            </summary>
        </member>
        <member name="P:OpenSSL.X509Name.OrganizationUnit">
            <summary>
            Access to the name entry with a short name of OU.
            </summary>
        </member>
        <member name="P:OpenSSL.X509Name.X509">
            <summary>
            Access to the name entry with a short name of X509.
            </summary>
        </member>
        <member name="P:OpenSSL.X509Name.Count">
            <summary>
            Calls X509_NAME_entry_count()
            </summary>
        </member>
        <member name="P:OpenSSL.X509Name.Item(System.String)">
            <summary>
            Indexer by name. Calls GetTextByName().
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:OpenSSL.X509Name.Item(System.Int32)">
            <summary>
            Calls X509_NAME_get_entry()
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSSL.X509Certificate.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenSSL.X509Certificate.Subject">
            <summary>
            This is the subject of the certificate
            </summary>
        </member>
        <member name="P:OpenSSL.X509Certificate.Issuer">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
